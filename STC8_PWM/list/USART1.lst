C51 COMPILER V9.00   USART1                                                                05/24/2018 21:42:12 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USART1
OBJECT MODULE PLACED IN .\list\USART1.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE USART1.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\USART1
                    -.lst) OBJECT(.\list\USART1.obj)

line level    source

*** WARNING C500 IN LINE 1 OF USART1.C: LICENSE ERROR (R208: RENEW LICENSE ID CODE (LIC))

   1          #include "USART1.h"
   2          
   3          
   4          COMx_Define     COM1;
   5          u8      idata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
   6          u8      idata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
   7          
   8          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
   9          {
  10   1              u8      i;
  11   1              u32     j;
  12   1              
  13   1              if(UARTx == USART1)
  14   1              {
  15   2                      COM1.id = 1;
  16   2                      COM1.TX_read    = 0;
  17   2                      COM1.TX_write   = 0;
  18   2                      COM1.B_TX_busy  = 0;
  19   2                      COM1.RX_Cnt     = 0;
  20   2                      COM1.RX_TimeOut = 0;
  21   2                      COM1.B_RX_OK    = 0;
  22   2                      for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  23   2                      for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  24   2      
  25   2                      if(COMx->UART_Mode > UART_9bit_BRTx)    return 1;       //模式错误
  26   2                      if(COMx->UART_Polity == PolityHigh)             PS = 1; //高优先级中断
  27   2                      else                                                                    PS = 0; //低优先级中断
  28   2                      SCON = (SCON & 0x3f) | COMx->UART_Mode;
  29   2                      if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
  30   2                      {
  31   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
  32   3                              if(j >= 65536UL)        return 2;       //错误
  33   3                              j = 65536UL - j;
  34   3                              if(COMx->UART_BRT_Use == BRT_Timer1)
  35   3                              {
  36   4                                      TR1 = 0;
  37   4                                      AUXR &= ~0x01;          //S1 BRT Use Timer1;
  38   4                                      TMOD &= ~(1<<6);        //Timer1 set As Timer
  39   4                                      TMOD &= ~0x30;          //Timer1_16bitAutoReload;
  40   4                                      AUXR |=  (1<<6);        //Timer1 set as 1T mode
  41   4                                      TH1 = (u8)(j>>8);
  42   4                                      TL1 = (u8)j;
  43   4                                      ET1 = 0;        //禁止中断
  44   4                                      TMOD &= ~0x40;  //定时
  45   4                                      INT_CLKO &= ~0x02;      //不输出时钟
  46   4                                      TR1  = 1;
  47   4                              }
  48   3                              else if(COMx->UART_BRT_Use == BRT_Timer2)
  49   3                              {
  50   4                                      AUXR &= ~(1<<4);        //Timer stop
  51   4                                      AUXR |= 0x01;           //S1 BRT Use Timer2;
  52   4                                      AUXR &= ~(1<<3);        //Timer2 set As Timer
  53   4                                      AUXR |=  (1<<2);        //Timer2 set as 1T mode
C51 COMPILER V9.00   USART1                                                                05/24/2018 21:42:12 PAGE 2   

  54   4                                      TH2 = (u8)(j>>8);
  55   4                                      TL2 = (u8)j;
  56   4                                      IE2  &= ~(1<<2);        //禁止中断
  57   4                                      AUXR &= ~(1<<3);        //定时
  58   4                                      AUXR |=  (1<<4);        //Timer run enable
  59   4                              }
  60   3                              else return 2;  //错误
  61   3                      }
  62   2                      else if(COMx->UART_Mode == UART_ShiftRight)
  63   2                      {
  64   3                              if(COMx->BaudRateDouble == ENABLE)      AUXR |=  (1<<5);        //固定波特率SysClk/2
  65   3                              else                                                            AUXR &= ~(1<<5);        //固定波特率SysClk/12
  66   3                      }
  67   2                      else if(COMx->UART_Mode == UART_9bit)   //固定波特率SysClk*2^SMOD/64
  68   2                      {
  69   3                              if(COMx->BaudRateDouble == ENABLE)      PCON |=  (1<<7);        //固定波特率SysClk/32
  70   3                              else                                                            PCON &= ~(1<<7);        //固定波特率SysClk/64
  71   3                      }
  72   2                      if(COMx->UART_Interrupt == ENABLE)      ES = 1; //允许中断
  73   2                      else                                                            ES = 0; //禁止中断
  74   2                      if(COMx->UART_RxEnable == ENABLE)       REN = 1;        //允许接收
  75   2                      else                                                            REN = 0;        //禁止接收
  76   2                      P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);      //切换IO
  77   2                      if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4);       //内部短路RXD与TXD, 做中继, ENABLE,DISA
             -BLE
  78   2                      else                                                                    PCON2 &= ~(1<<4);
  79   2                      return  0;
  80   2              }
  81   1              return 3;       //其它错误
  82   1      }
  83          
  84          
  85          /*************** 装载串口发送缓冲 *******************************/
  86          
  87          void TX1_write2buff(u8 dat)     //写入发送缓冲，指针+1
  88          {
  89   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
  90   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
  91   1      
  92   1              if(COM1.B_TX_busy == 0)         //空闲
  93   1              {  
  94   2                      COM1.B_TX_busy = 1;             //标志忙
  95   2                      TI = 1;                                 //触发发送中断
  96   2              }
  97   1      }
  98          
  99          void PrintString1(u8 *puts)
 100          {
 101   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);         //遇到停止符0结束
 102   1      }
 103          
 104          
 105          
 106          /********************* UART1中断函数************************/
 107          void UART1_int (void) interrupt UART1_VECTOR
 108          {
 109   1              if(RI)
 110   1              {
 111   2                      RI = 0;
 112   2                      if(COM1.B_RX_OK == 0)
 113   2                      {
 114   3                              if(COM1.RX_Cnt >= COM_RX1_Lenth)        COM1.RX_Cnt = 0;
C51 COMPILER V9.00   USART1                                                                05/24/2018 21:42:12 PAGE 3   

 115   3                              RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 116   3                              COM1.RX_TimeOut = TimeOutSet1;
 117   3                      }
 118   2              }
 119   1      
 120   1              if(TI)
 121   1              {
 122   2                      TI = 0;
 123   2                      if(COM1.TX_read != COM1.TX_write)
 124   2                      {
 125   3                              SBUF = TX1_Buffer[COM1.TX_read];
 126   3                              if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
 127   3                      }
 128   2                      else    COM1.B_TX_busy = 0;
 129   2              }
 130   1      }
 131          
 132          
 133          
 134          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    546    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       7
   IDATA SIZE       =     80    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
